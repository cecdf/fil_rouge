{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# partie1 catégorie sociologue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>csp</th>\n",
       "      <th>gen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>18-25 ans</td>\n",
       "      <td>Élèves, étudiants</td>\n",
       "      <td>Femme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>18-25 ans</td>\n",
       "      <td>Élèves, étudiants</td>\n",
       "      <td>Homme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>18-25 ans</td>\n",
       "      <td>Élèves, étudiants</td>\n",
       "      <td>Homme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>18-25 ans</td>\n",
       "      <td>Élèves, étudiants</td>\n",
       "      <td>Femme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>18-25 ans</td>\n",
       "      <td>Élèves, étudiants</td>\n",
       "      <td>Femme</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          age                csp    gen\n",
       "30  18-25 ans  Élèves, étudiants  Femme\n",
       "31  18-25 ans  Élèves, étudiants  Homme\n",
       "32  18-25 ans  Élèves, étudiants  Homme\n",
       "33  18-25 ans  Élèves, étudiants  Femme\n",
       "34  18-25 ans  Élèves, étudiants  Femme"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_age = pd.read_csv('age.csv')\n",
    "df_age.index = list(df_age.id_age)\n",
    "df_age = df_age[['text']]\n",
    "df_age.columns = ['age']\n",
    "\n",
    "df_csp = pd.read_csv('categorie_socio.csv')\n",
    "df_csp.index = list(df_csp.id_csp)\n",
    "df_csp = df_csp[['text']]\n",
    "df_csp.columns = ['csp']\n",
    "\n",
    "df_gen = pd.read_csv('genre.csv')\n",
    "df_gen.index = list(df_gen.id_genre)\n",
    "df_gen = df_gen[['text']]\n",
    "df_gen.columns = ['gen']\n",
    "\n",
    "df_par = pd.read_csv('participant.csv')\n",
    "df_par.index = list(df_par.id_participant)\n",
    "list_participant = list(df_par.id_participant)\n",
    "df_par = df_par[['id_age', 'id_csp', 'id_genre']]\n",
    "df_par.columns = ['id_age', 'id_csp', 'id_gen']\n",
    "\n",
    "df1 = df_par.join(df_age, on = 'id_age')\n",
    "df2 = df1.join(df_csp, on = 'id_csp')\n",
    "df3 = df2.join(df_gen, on = 'id_gen')\n",
    "df4 = df3[['age', 'csp', 'gen']]\n",
    "\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# partie2 durée de chaque époque"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_temps = pd.read_csv(\"participant.csv\",sep=',') \n",
    "df_temps.index = list_participant\n",
    "df_temps = df_temps[['t_drag1', 't_drag2', 't_note1', 't_not2', 't_csp']]\n",
    "\n",
    "df_temps['t_drag1'] = pd.to_datetime(df_temps['t_drag1'],infer_datetime_format=True)\n",
    "df_temps['t_drag2'] = pd.to_datetime(df_temps['t_drag2'],infer_datetime_format=True)\n",
    "df_temps['t_note1'] = pd.to_datetime(df_temps['t_note1'],infer_datetime_format=True)\n",
    "df_temps['t_not2'] = pd.to_datetime(df_temps['t_not2'],infer_datetime_format=True)\n",
    "df_temps['t_csp'] = pd.to_datetime(df_temps['t_csp'],infer_datetime_format=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>td1</th>\n",
       "      <th>td2</th>\n",
       "      <th>td3</th>\n",
       "      <th>td4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>00:01:20</td>\n",
       "      <td>00:00:39</td>\n",
       "      <td>00:00:45</td>\n",
       "      <td>00:00:26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>00:00:58</td>\n",
       "      <td>00:00:45</td>\n",
       "      <td>00:01:05</td>\n",
       "      <td>00:00:26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>00:01:24</td>\n",
       "      <td>00:00:54</td>\n",
       "      <td>00:00:49</td>\n",
       "      <td>00:00:41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>00:01:33</td>\n",
       "      <td>00:00:29</td>\n",
       "      <td>00:01:19</td>\n",
       "      <td>00:00:26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>00:02:07</td>\n",
       "      <td>00:00:35</td>\n",
       "      <td>00:02:18</td>\n",
       "      <td>00:00:34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        td1      td2      td3      td4\n",
       "30 00:01:20 00:00:39 00:00:45 00:00:26\n",
       "31 00:00:58 00:00:45 00:01:05 00:00:26\n",
       "32 00:01:24 00:00:54 00:00:49 00:00:41\n",
       "33 00:01:33 00:00:29 00:01:19 00:00:26\n",
       "34 00:02:07 00:00:35 00:02:18 00:00:34"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frames = []\n",
    "column3 = ['td1', 'td2', 'td3', 'td4']\n",
    "for i in range(0, len(list_participant)): \n",
    "    name = list_participant[i]\n",
    "    a = list(df_temps.iloc[i])\n",
    "    a = sorted(a)\n",
    "    b = []\n",
    "    for i in range(0, len(a) - 1): \n",
    "        b.append(a[i+1] - a[i])\n",
    "    c = pd.DataFrame(b, index = column3, columns = [name]).T\n",
    "    frames.append(c)\n",
    "df5 = pd.concat(frames)\n",
    "df5.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# partie3 différence de repas et de note"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
